name: Build & Run all tests (release) & Make an unstable release

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

defaults:
  run:
    shell: cmd

jobs:
    build:
    
        name: Prepare and build on Windows Server 2016 VM
        runs-on: windows-2019
        steps:
            - uses: actions/checkout@v3
            
            - name: Install dependencies into Virtual Environment...
              run: _RegisterHelixNUnit.bat
            
            - name: Build project in Release-mode, compile Pas-units, run tests
              run: _GenerateAllSetupsForGitHubActions.bat
              timeout-minutes: 40
              env:
                PABCNET_BUILD_MODE: Release
                PABCNET_RUN_TESTS:  false
                PABCNET_INC_BUILD:  false
                PABCNET_VERBOSE:    false
            
            - name: Create Github Release
              uses: actions/github-script@main
              with:
                script: |
                
                    throw 'please configure custom auto-release and remove this line';
                    const tag = "_____"; // git tag name (preferably different from branch name)
                    const release_name = "Custom _____ build"; // Github release display name
                    const mark_pre_release = true;
                    
                    console.log('environment', process.versions);
                    
                    const { repo: { owner, repo }, sha } = context;
                    console.log({ owner, repo, sha });
                    
                    // Check if the release already exists
                    const existingReleases = await github.rest.repos.listReleases({ owner, repo });
                    for (const existingRelease of existingReleases.data) {
                        if (existingRelease.tag_name === tag) {
                            console.log('deleing old release', { existingRelease });
                            await github.rest.repos.deleteRelease({
                                owner,
                                repo,
                                release_id: existingRelease.id,
                            });
                            break;
                        }
                    }
                    
                    try {
                        await github.rest.git.deleteRef({
                            owner: owner,
                            repo: repo,
                            ref: `tags/${tag}`
                        });
                        console.log('Tag deleted successfully');
                    } catch (error) {
                        console.error(`Error deleting tag: ${error}`);
                    }
                    
                    const fs = require('fs').promises;
                    
                    const release = await github.rest.repos.createRelease({
                        owner, repo,
                        tag_name: tag,
                        name: release_name,
                        draft: true,
                        prerelease: mark_pre_release,
                        target_commitish: sha
                    });
                    
                    console.log('created release', { release });
                    
                    for (let file of await fs.readdir('Release')) {
                        console.log('uploading', file);
                        if (file.startsWith('.')) continue;
                        
                        try {
                            await github.rest.repos.uploadReleaseAsset({
                                owner, repo,
                                release_id: release.data.id,
                                name: file,
                                data: await fs.readFile(`./Release/${file}`)
                            });
                        } catch (error) {
                            console.error(`Error uploading: ${error}`);
                        }
                        
                    }
                    
                    if (release.data.draft) {
                        console.log('finalizing draft release');
                        await github.rest.repos.updateRelease({
                            owner,
                            repo,
                            release_id: release.data.id,
                            draft: false,
                        });
                    }